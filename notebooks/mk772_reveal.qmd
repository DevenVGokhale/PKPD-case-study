---
title: "MK772 — 3‑Compartment Transit PK: Reconstruction & Design"
author: Deven Gokhale
format:
  revealjs: 
    theme: solarized
    code-overflow: wrap
    code-fold: true
    transition: fade
    code-line-numbers: true
    incremental: true
execute:
  echo: true
  warning: false
  message: false
  cache: true
editor: source
---

# Introduction

```{r}
#| label: setup
#| include: false
# Packages
suppressPackageStartupMessages({
  library(tidyverse)
  library(readr)
  library(glue)
  library(nlmixr2)
  library(nlmixr2est)
  library(broom.mixed)
  library(gt)
  library(stringr)
  library(patchwork)
  library(xpose)
  library(xpose.nlmixr2)
})

# ---- Plot theme & defaults ----
# A clean, presentation-friendly theme and sensible defaults
source("./scripts_nlmixr2/plot_theme.R")
theme_mk772 <- theme_mk772_solarized("light")

# Helper: load first existing file
first_existing <- function(paths) paths[file.exists(paths)][1]

# Standardize columns for plotting/fit
standardize_pk <- function(df){
  # Try to discover the DV column (concentration)
  dv_col <- dplyr::case_when(
    "DV" %in% names(df) ~ "DV",
    "DV_CP" %in% names(df) ~ "DV_CP",
    "Cp" %in% names(df) ~ "Cp",
    TRUE ~ NA_character_
  )
  stopifnot(!is.na(dv_col))
  df %>%
    rename(
      ID   = tidyselect::any_of(c("ID","id")),
      TIME = tidyselect::any_of(c("TIME","time"))
    ) %>%
    mutate(DV = .data[[dv_col]]) %>%
    arrange(ID, TIME)
}

# Paths (relative to repo root)
data_paths <- c(
  "./data/pkpd_3cmt_transit.rds",
  "./data/pkpd_3cmt_transit.csv"
)

fit <- read_rds("./results/fit_3cmt_transit.rds")

path_data <- first_existing(data_paths)
if (is.na(path_data)) stop("No data file found in expected locations.")

raw <- if (grepl("\\.rds$", path_data)) readr::read_rds(path_data) else readr::read_csv(path_data, show_col_types = FALSE)

pk <- standardize_pk(raw)
```

# Data overview

## Data Overview
:::: columns
::: {.column width="40%"}
 - Using a population of 50 individuals
 - Individuals demonstrated a wide  weight distribution
 - A rich PK profile was used sampled every 6 hours over 10 days
 - A 600 mg oral dose was admistered every 72 hours
:::  
::: {.column width="60%"}  
```{r}
#| label: spaghetti
#| fig-height: 7
pk_profiles <- (
  pk |> 
    ggplot(aes(TIME, DV, group = ID)) +
    geom_line(alpha = 0.6) +
    geom_point(size = 0.6, alpha = 0.6) +
    scale_y_continuous(trans = scales::pseudo_log_trans()) +
    labs(x = "Time", y = "MK772 Concentration\n(mg/mL)") 
  )

ind_wts <- (
  pk |> 
    ggplot(aes(WT)) +
    geom_histogram() +
    labs(x = "Weight (Kg)", y = "Count") 
)

ind_wts / pk_profiles + 
  plot_layout(heights = c(1,3)) &
  theme_bw2()

```
:::
::::

# Fitting Compartmental models 

- A number of struturally diverse compartmental models were fit to the population of subjects
- Individuals weight was added as a covaraiate to account for allometric scaling 
- Indiviual effects were added to capture inter-individual variability
- Robust calibration was attained by iteratively running SAEM and FOCEi algorithms
- For each model essential PK parameters were estimated using the available PK profiles

## Add model structures image


## Best model: Trace plot

```{r}
#| label: saem-traceplots
#| message: false
#| warning: false
traceplot(fit) + labs(x = "Iteration", y = "Value") + theme_bw()
```

## Parameter estimates

```{r}
#| results: "hide"
#| echo: false
fx <- tidy(fit, effects = "fixed")
```
::: columns
::: {.column width = "40%"}
 - True parameter values were recovered for the best fitting model
 - Estimated CV% were marginally inflated but well within the accpetable ranges
 - Residual error was accurately recovered
:::
::: {.column width = "60%"}
```{r}
#| label: tidy-pars
#| message: false
#| warning: false
#| tbl-cap: "Fixed effects (back-transformed where applicable) and variance components"

rp <- tidy(fit, effects = "ran_pars") |> dplyr::filter(group=="ID")  
sg <- tidy(fit, effects = "ran_pars") |> dplyr::filter(group!="ID")  

# # --- Fixed effects: back-transform log-params ---
bt_map <- c(tcl = "CL", tvc = "Vc", tktr = "ktr")
fixed_tbl <- fx %>%
  transmute(
    term,
    estimate,
    se = dplyr::coalesce(std.error, NA_real_)
  ) %>%
  mutate(
    Parameter   = dplyr::recode(term, !!!bt_map, .default = term),
    Estimate_bt = if_else(term %in% names(bt_map), exp(estimate), estimate),
    SE_bt       = if_else(term %in% names(bt_map) & !is.na(se), exp(estimate) * se, se),
    LCI         = if_else(!is.na(SE_bt), Estimate_bt * exp(-1.96 * dplyr::coalesce(se, 0)), NA_real_),
    UCI         = if_else(!is.na(SE_bt), Estimate_bt * exp( 1.96 * dplyr::coalesce(se, 0)), NA_real_)
  ) %>%
  transmute(
    Component = "Fixed effects",
    Parameter,
    Estimate  = Estimate_bt,
    SE        = SE_bt,
    LCI, UCI,
    Notes     = NA_character_
  )

# --- Random effects: parse SDs (diag) and correlations (off-diag) ---
# broom.mixed typically returns columns like: effect, group, term, estimate, component (\"sd\", \"cor\", or \"sdcor\")
iiv_var <- NULL
iiv_cor <- NULL


# SDs -> convert to variances; add %CV note (SD ~ omega on ETA-scale)
iiv_var <- rp |> 
    transmute(
        Component = "Random effects (Ω)",
        Parameter = dplyr::case_when(
            term == "sd__eta.cl" ~ "IIV CL",
            term == "sd__eta.vc" ~ "IIV Vc",
            TRUE ~ term),
        Estimate  = estimate^2,  # variance
        SE        = NA_real_, LCI = NA_real_, UCI = NA_real_,
        Notes     = paste0("CV%≈ ", sprintf("%.1f", estimate * 100))
        )

# --- Residual (Σ) ---
sigma_tbl <- sg |> 
    transmute(
      Component = "Residual error (Σ)",
      Parameter = "Proportional",
      Estimate  = estimate,
      SE = NA_real_,
      Notes = NA_character_
    )

# --- Combine and render ---
all_params <- bind_rows(fixed_tbl, iiv_var, iiv_cor, sigma_tbl) %>%
  mutate(Component = factor(Component, levels = c("Fixed effects","Random effects (Ω)","Residual error (Σ)"))) %>%
  arrange(Component, desc(str_detect(Parameter, "^IIV\\(")), Parameter)

all_params %>%
  arrange(factor(Component, levels = c("Fixed effects","Random effects (Ω)","Residual error (Σ)")),
          desc(grepl("^IIV\\(", Parameter)),  # optional ordering
          Parameter) %>%
  gt(groupname_col = "Component") %>%   # <-- turns Component into group headers
  cols_hide("Component") %>%            # <-- hides the repeating column
  fmt_number(c(Estimate, SE, LCI, UCI), decimals = 3) %>%
  tab_options(row_group.as_column = FALSE) %>%  # default; keeps headers in the margin
  opt_row_striping()

```
:::
:::
# Model Performance
## Predicted v/s Obseverved
```{r}
#| label: generate xpose object
#| echo: false
#| results: "hide"
#| message: false

# load the gof data and xpose it
xp_fit <- xpose_data_nlmixr2(fit, quiet=TRUE)

```
::: columns
::: {.column width="40%"}
 - Something wicked
 - Somthing wicked
 - Something wicked
:::
::: {.column width="60%"}
```{r}
#| label: pred vs dv
#| fig-height: 7
plt1 <- (
    dv_vs_pred(xp_fit, type = "p") + 
        labs(title = "", subtitle = "", caption = "") 
        )
plt2 <- (
    dv_vs_ipred(xp_fit, type = "p") +
        labs(title = "", subtitle = "", caption = "")  
    )

(plt1 | plt2) & theme_bw()
```
:::
:::

## Individual Weighted Residuals

```{r}
#| echo: false
#| results: "hide"
xp_tad <- set_var_types(xp_fit, idv = "TAD") 
```
::: columns
::: {.column width="40%"}
 - Something wicked
 - Somthing wicked
 - Something wicked
:::
::: {.column width="60%"}
```{r}

#| label: pred v/s DV
#| message: false
#| fig-height: 7
plt1 <- (
    res_vs_pred(xp_fit, res = "IWRES", type="p") + 
        labs(title = "", subtitle = "", caption = "") 
        )
        
plt2  <- (
    res_vs_idv(xp_tad, res = "IWRES", type = "p") + 
        labs(title = "", subtitle = "", caption= "") 
        )

(plt1 | plt2) & theme_bw()
```
---
:::
:::

## Residual Distribution 
::: columns
::: {.column width="40%"}
- something wicked
- something wicked
- something wicked
:::
::: {.column width="60%"}
```{r}
#| label: iwres-health
#| message: false
#| warning: false
#| fig-height: 7

p_iwres_hist <- res_distrib(
  xp_fit, res = "IWRES", type = "h", caption = NULL) +
    labs(y = "Density", title = "", subtitle = "", caption = "")  

p_iwres_qq <- res_qq(
  xp_fit, res = "IWRES", type = "p", caption = NULL) + 
    labs(title = "", subtitle = "", y = "Quantiles of IWRES") 

(p_iwres_hist | p_iwres_qq) & theme_bw()
```
:::
:::
## IIV Distribution 
::: {.row height="60%"}
```{r}
#| label: eta-health
#| message: false
#| warning: false

p_eta_hist <- (
    eta_distrib(
        xp_fit, type = "h", ncol = 2, 
        nrow = 1, page = 1) +
    labs(title = "", subtitle = "", caption = "", 
         x = "Value", y = "Density") 
    )

p_eta_qq <- (
    eta_qq(
        xp_fit, type = "p", ncol = 2, 
        nrow = 1, page = 1, caption = NULL) + 
    labs(title = "", subtitle = "") 
    )

# 2×2 layout: top row = two ETA histograms; bottom row = two ETA QQ plots
(p_eta_hist / p_eta_qq) & theme_bw()
```
:::
::: rows
::: {.row height="40%"}
something wicked. something wicked. something wicked
:::
:::
# Visual Predictive Checks 
## Pooled Fits
```{r}
#| label: run vpc-pc
#| message: false
#| warning: false
#| echo: false
#| results: "hide"
set.seed(42)

vpc1 <- vpcPlot(
  fit,                 # your nlmixr2 SAEM fit object
  n = 300,             # number of simulation replicates
  pred_corr = TRUE,    # prediction-corrected VPC
  idv = "time",         # independent variable column in your data
  show=list(obs_dv=TRUE)
) + labs(x = "Time", y = "DV") 

vpc2 <- vpcPlot(
  fit,                 # your nlmixr2 SAEM fit object
  n = 300,             # number of simulation replicates
  pred_corr = TRUE,    # prediction-corrected VPC
  idv = "tad",         # independent variable column in your data
  show=list(obs_dv=TRUE)
) + labs(x = "Time after dose", y = "DV") 
```
::: columns
::: {.column width="40%"}
- something wicked
- something wicked
- something wicked
:::
::: {.column width="60%"}
```{r}
#| label: vpc-pc
#| message: false
#| warning: false
#| fig-height: 7

(vpc1 / vpc2) & theme_bw()
```
 
:::
:::
## Individual Fits 
```{r}
 #| label: individual-fits
 #| fig-height: 10
 df <- fit |> as_tibble()

  # for reproducibility
ids_10 <- df |> distinct(ID) |> slice_sample(n = 6) |> pull(ID)
ind_df <- df |> filter(ID %in% ids_10)

plt <- ind_df |>
  ggplot(aes(x = TIME)) +
  geom_point(aes(y = DV), alpha = 0.6, size = 1) +
  geom_line(aes(y = IPRED, linetype = "IPRED")) +
  geom_line(aes(y = PRED,  linetype = "PRED")) +
  scale_linetype_manual(values = c(IPRED = 1, PRED = 2), name = "") +
  facet_wrap(~ ID, ncol = 2, scales = "fixed") +
  labs(x = "Time", y = "DV", title = "Individual fits (6 random IDs)")+
  theme_bw() +
  theme(legend.position = "bottom")

plt
```  

